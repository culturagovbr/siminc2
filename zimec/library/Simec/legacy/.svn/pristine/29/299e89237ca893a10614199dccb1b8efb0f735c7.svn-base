<?php
/**
 *
 */

/**
 * Cliente Soap Simecs.
 * @see Simec_SoapClient
 */
require_once(dirname(__FILE__) . '/SoapClient.php');


/**
 * Classe base de chamada a webservices.
 * @todo: Adicionar metodo para recuperar o timestamp da ultima requisicao
 */
abstract class Simec_BasicWS
{
    const PRODUCTION = 1;
    const STAGING = 2;
    const DEVELOPMENT = 3;

    /**
     * Indica o ambiente em que o WS será consultado.
     * @var int
     */
    protected $enviroment = self::PRODUCTION;

    /**
     * URL de requisição do WS, carregado com loadURL.
     * @var string
     */
    protected $urlWSDL;

    /**
     * Referência para o client do webservice.
     * @var SoapClient
     */
    protected $soapClient;

    /**
     * Usuário utilizado no header da requisição.
     * @var string
     */
    protected $headerUsername;

    /**
     * Senha utilizada no header da requisição.
     * @var string
     */
    protected $headerPassword;

    /**
     * Indica se deve se salvo o log das requisições.
     * @var boolean
     */
    protected $logRequests = false;

    /**
     *
     * @param type $env
     */
    public function __construct($env = null)
    {
        // -- Configurando o ambiente de execução
        if (!is_null($env)) {
            $this->enviroment = $env;
        }
        $this->_init();
        $this->connect();
    }

    protected function connect()
    {
        // -- Instanciando o soap client
        $this->soapClient = new Simec_SoapClient(
            $this->urlWSDL,
            $this->loadConnectionOptions(),
            $this->loadClassMap()
        );
    }

    public function setHeaderUsername($headerUsername)
    {
        $this->headerUsername = $headerUsername;
        return $this;
    }

    /**
     * Retorna o usuário utilizado no header da requisição.
     * @return string
     */
    protected function getHeaderUsername()
    {
        return $this->headerUsername;
    }

    /**
     * Retorna a senha utilizada no header da requisição.
     * @return string
     */
    protected function getHeaderPassword()
    {
        return $this->headerPassword;
    }

    public function setHeaderPassword($headerPassword)
    {
        $this->headerPassword = $headerPassword;
        return $this;
    }

    /**
     * Usa mt_rand() para gerar um número único não repetido. Em sequida, empacota esse número como um
     * número hexadecimal e retorna este valor codificado em base64.
     * @return string
     */
    protected function getNonce()
    {
        return base64_encode(
            pack('H*', mt_rand())
        );
    }

    /**
     * Cria as opções de conexão baseadas em ambiente de
     * execução do webservice.
     * @see ProgramacaoFinanceira
     *
     * @return \Simec_SoapClient_Options
     */
    abstract protected function loadConnectionOptions();

    /**
     * Cria o array de mapeamento de classes conforme necessidade
     * do serviço que será consumido. Se não for usar o modelo
     * de classmap, basta implementar a função retornando null.
     *
     * @return \Simec_SoapClient_ClassMap|null
     */
    abstract protected function loadClassMap();

    /**
     * Inicializações pré-constructor.
     * Use para iniciar a URL de conexão, e outras tarefas que precisa ser feitas,
     * antes de construtir o SoapClient.
     */
    abstract protected function _init();
}
