<?php
/**
 * Renderizador de listagens HTML.
 *
 * @version $Id$
 */

/**
 * Renderizador base.
 * @see Simec_Listagem_Renderer_Abstract
 */
require_once(dirname(__FILE__) . '/Abstract.php');

class Simec_Listagem_Renderer_Html extends Simec_Listagem_Renderer_Abstract
{
    /**
     * Conjunto de regras de formatação de uma linha da listagem.
     * @var array
     */
    protected $regrasDeLinha = array();

    /**
     * Armazena as ações que devem ser adicionadas à listagem.
     * $this->acoes = array(
     *     'plus' => 'detalharItem', // -- ações simples
     *     'send' => array( // -- ações avançadas
     *         'func' => 'detalharItem',
     *         'extra-params' => array('iditem', 'exercicio')
     *      )
     * );
     *
     * @var array
     * @see Simec_Listagem::addAcao()
     */
    protected $acoes = false;

    /**
     * Lista de ações e condições que devem ser atendidas para exibição da ação.
     * @var array
     * @see Simec_Listagem::setAcaoComoCondicional()
     */
    protected $acoesCondicionais = array();

    /**
     * Imprime o código HTML da listagem.
     */
    public function render()
    {
        // -- Incluíndo o arquivo de javascript de funções do relatório
        echo <<<HTML
<script type="text/javascript" lang="JavaScript">
$(document).ready(function(){
    $.getScript('/library/simec/js/listagem.js');
});
</script>
HTML;
        // -- Título do relatório
        $this->renderTitulo();
        echo '<form method="post" id="id_aleatorio">';
        echo '<table class="table table-striped table-bordered table-hover" id="tb_render" >';

        echo $this->renderCabecalho();

        if (class_exists('Zend_Application')) {
            echo $this->renderFiltro();
        }


        $this->renderDados();
        echo $this->renderRodape();
        echo '</table>';
        echo '</form>';
    }

    /**
     * Verifica se é necessario incluir um título na listagem.
     * @see Simec_Listagem::render()
     */
    protected function renderTitulo()
    {
        if ($this->titulo) {
            echo <<<HTML
            <div class="page-header">
                <h4>{$this->titulo}</h4>
            </div>
HTML;
        }
    }

    protected function renderCabecalho()
    {
        // -- Se não houver um cabeçalho definido, pula a criação do cabeçaho
        if (is_null($this->cabecalho)) {
            return '';
        }

        $qtdAcoes = count($this->acoes);
        if ($this->acoes && $qtdAcoes > 0) {
            array_unshift($this->cabecalho, '&nbsp');
            $spanPrimeiraColuna = count($this->acoes);
        }

        $nivelCabecalho = 1;
        foreach ($this->cabecalho as $cabecalho) {
            if (is_array($cabecalho)) {
                $nivelCabecalho++;
                break;
            }
        }
        // -- Cabecalho de um único nível
        if (1 == $nivelCabecalho) {
            $colunas = '';
            foreach ($this->cabecalho as $itemCabecalho) {
                if ('&nbsp' == $itemCabecalho) {
                    $colunas .= '<th class="text-center" colspan="' . $spanPrimeiraColuna . '">' . $itemCabecalho . '</th>';
                } else {
                    $colunas .= '<th class="text-center">' . $itemCabecalho . '</th>';
                }
            }
            return <<<HEADER
                                <thead>
                                    <tr>{$colunas}</tr>
                                </thead>
HEADER;
        }
                    // -- Dois níveis de cabecalho
        $cabecalho = '<thead><tr>';

        // -- Primeiro nível
        foreach ($this->cabecalho as $key => $itemCabecalho) {
            if (is_array($itemCabecalho)) {
                $colspan = count($itemCabecalho);
                $cabecalho .= <<<HTML
                                <th class="text-center" colspan="{$colspan}">{$key}</th>
HTML;
            } else {
                if ('&nbsp' == $itemCabecalho) {
                    if (!$this->renderPrimeiroItem) {
                        continue;
                    }
                    $cabecalho .= <<<HTML
                                <th class="text-center" rowspan="2" colspan="{$spanPrimeiraColuna}">{$itemCabecalho}</th>
HTML;
                    $this->renderPrimeiroItem = false;
                } else {
                    $cabecalho .= <<<HTML
                                <th class="text-center" rowspan="2">{$itemCabecalho}</th>
HTML;
                }
            }
        }
        $cabecalho .= '</tr><tr>';
        // -- Segundo nível
        foreach ($this->cabecalho as $key => $value) {
            if (!is_array($value)) {
                continue;
            }
            foreach ($value as $colunaFilho) {
                    $cabecalho .= <<<HTML
                                <th class="text-center">{$colunaFilho}</th>
HTML;
            }
        }
        $cabecalho .= '</tr></thead>';
        return $cabecalho;
    }

    protected function renderFiltro()
    {
        // -- Se não houver um cabeçalho definido, pula a criação do cabeçaho
        if (is_null($this->cabecalho)) {
            return '';
        }

        $qtdAcoes = count($this->acoes);
        if ($this->acoes && $qtdAcoes > 0) {
            array_unshift($this->cabecalho, '&nbsp');
            $spanPrimeiraColuna = count($this->acoes);
        }

        $nivelCabecalho = 1;
        foreach ($this->cabecalho as $cabecalho) {
            if (is_array($cabecalho)) {
                $nivelCabecalho++;
                break;
            }
        }
        // -- Cabecalho de um único nível
        if (1 == $nivelCabecalho) {
            $colunas = '';

            $aDados = array_keys(current($this->dados));


            foreach ($this->cabecalho as $key => $itemCabecalho) {
                if ('&nbsp' == $itemCabecalho) {
                    $colunas .= '<th class="text-center campo_filtro" colspan="' . $spanPrimeiraColuna . '"><input></th>';
                } else {
                    $colunas .= <<<HTML
<th class="text-center campo_filtro"><input name="filtro[{$aDados[$key]}]"></th>
HTML;
                }
            }
            return <<<HEADER
                                <thead>
                                    <tr>{$colunas}</tr>
                                </thead>
HEADER;
        }
                    // -- Dois níveis de cabecalho
        $cabecalho = '<thead><tr>';

        // -- Primeiro nível
        foreach ($this->cabecalho as $key => $itemCabecalho) {
            if (is_array($itemCabecalho)) {
                $colspan = count($itemCabecalho);
                $cabecalho .= <<<HTML
                                <th class="text-center" colspan="{$colspan}">{$key}</th>
HTML;
            } else {
                if ('&nbsp' == $itemCabecalho) {
                    if (!$this->renderPrimeiroItem) {
                        continue;
                    }
                    $cabecalho .= <<<HTML
                                <th class="text-center" rowspan="2" colspan="{$spanPrimeiraColuna}">{$itemCabecalho}</th>
HTML;
                    $this->renderPrimeiroItem = false;
                } else {
                    $cabecalho .= <<<HTML
                                <th class="text-center" rowspan="2">{$itemCabecalho}</th>
HTML;
                }
            }
        }
        $cabecalho .= '</tr><tr>';
        // -- Segundo nível
        foreach ($this->cabecalho as $key => $value) {
            if (!is_array($value)) {
                continue;
            }
            foreach ($value as $colunaFilho) {
                    $cabecalho .= <<<HTML
                                <th class="text-center">{$colunaFilho}</th>
HTML;
            }
        }
        $cabecalho .= '</tr></thead>';
        return $cabecalho;
    }

    /**
     * Faz a contagem de colunas da listagem, incluíndo colunas de ações (quando presentes).
     * @return integer
     */
    protected function quantidadeDeColunasExibidas()
    {
        if(count($this->colunasOcultas) != 0){
            $qtdColunasExibidas = count(
                array_diff_key( // -- Criar um array temporário com os campos dados que não estão inclusos na listagem de colunas ocultas
                    $this->dados[0],
                    array_combine( // -- Cria um array temporário baseado nas colunas ocultas
                        $this->colunasOcultas,
                        array_fill(0, count($this->colunasOcultas), null)
                    )
                )
            );
        }
        // -- Ajuste da quantidade de colunas da query mediante contagem de ações
        if (count($this->acoes) > 1) {
            // -- -1 pq a coluna de ID já é contada em $qtdColunasExibidas
            $qtdColunasExibidas += count($this->acoes) - 1;
        }

        return $qtdColunasExibidas;
    }

    protected function renderDados()
    {
        // -- @todo Verificar se o tipo de listagem é de FORM, para incluir os inputs
        if (empty($this->dados)) {
            return;
        }
        echo <<<BODY
    <tbody>
BODY;
        foreach ($this->dados as $linha => $dadosLinha) {
            $classe = $this->getClasseLinha($dadosLinha);

            echo <<<TR
        <tr{$classe}>
TR;
            echo $this->parseAcao($dadosLinha, $linha);
            // -- @todo: Verificar o tipo da listagem do formulario
            if ($this->acoes) {
                $idLinha = array_shift($dadosLinha);
            } else {
                reset($dadosLinha);
                $idLinha = current($dadosLinha);
            }
            foreach ($dadosLinha as $key => $dado) {
                if (!in_array($key, $this->colunasOcultas)) {
                    // -- Verificação de totalizador de coluna
                    if (in_array($key, array_keys($this->colunasTotalizadas))) {
                        $this->somarColuna($key, $dado);
                    }
                    // -- Chamando função de callback registrada para o campo da listagem
                    if (array_key_exists($key, $this->callbacksDeCampo)) {
                        $dado = $this->callbacksDeCampo[$key]($dado, $dadosLinha, $idLinha);
                    }
                    echo <<<TD
            <td class="text-center">{$dado}</td>
TD;
                }
            }
            echo <<<TR
        </tr>
TR;
        }
        echo <<<BODY
    </tbody>
BODY;
    }

    /**
     * @todo Incluir o javascript de ações automaticamente quando as funções não estiverem definidas.
     * @link http://stackoverflow.com/questions/8085111/how-to-include-a-remote-javascript-file-conditionally
     * @param type $dados
     * @param type $linha
     * @return string
     */
    protected function parseAcao($dados, $linha)
    {
        $acoesHTML = '';
        if (!$this->acoes) {
            return $acoesHTML;
        }

        foreach ($this->acoes as $acao => $configAcao) {
            if (!is_array($configAcao)) {
                $configAcao = array('func' => $configAcao);
            }
            $configAcao['condicao'] = $this->acoesCondicionais[$acao];
            $objAcao = Simec_Listagem_FactoryAcao::getAcao($acao, $configAcao);
            $acoesHTML .= (string)$objAcao->setDados($dados);
        }

        return $acoesHTML;
    }

    protected function getClasseLinha($dados)
    {
        foreach ($this->regrasDeLinha as $regra) {
            $method = strtolower($regra['op']);
            if (Simec_Operacoes::$method($dados[$regra['campo']], $regra['valor'])) {
                return <<<HTML
                    class="{$regra['classe']}"
HTML;
            }
        }
    }

    /**
     * Cria o rodapé da listagem.
     * @todo Implementar o totalizador de coluna.
     */
    protected function renderRodape()
    {
        if (Simec_Listagem::TOTAL_QTD_REGISTROS == $this->totalizador) {
            $spanDeColunas = (count($this->dados[0]) -1) + count($this->acoes);
            $numRegistros = count($this->dados);
            echo <<<HTML
                    <tfoot>
                        <tr>
                            <td style="text-align:right" colspan="{$spanDeColunas}"><strong>Total de registros:&nbsp; $numRegistros</strong></td>
                        </tr>
                    </tfoot>
HTML;
        } elseif (Simec_Listagem::TOTAL_SOMATORIO_COLUNA == $this->totalizador) {
            echo <<<HTML
                    <tfoot>
                        <tr>
HTML;
                            // -- Correção para quando tem mais de uma ação na listagem.
                            $dadosLinha = $this->dados[0];
                            if (is_array($this->acoes)) {
                                $qtdAcoes = count($this->acoes);
                                for ($i = 0; $i < $qtdAcoes; $i++) {
                                    array_unshift($dadosLinha, "--a{$i}");
                                }
                            }

                            foreach ($dadosLinha as $key => $dado) {
                                if (in_array($key, $this->colunasOcultas)) {
                                    continue;
                                }
                                if (0 === $key) { // -- oO ????
                                    continue;
                                }

                                if (key_exists($key, $this->colunasTotalizadas)) {
                                    if (is_string($key) && key_exists($key, $this->callbacksDeCampo)) {
                                        $valor = $this->callbacksDeCampo[$key]($this->colunasTotalizadas[$key]);
                                    } else {
                                        $valor = $this->colunasTotalizadas[$key];
                                    }
                                    echo <<<HTML
                                            <td style="text-align:center;font-weight:bold">{$valor}</td>
HTML;
                                } else {
                                    echo <<<HTML
                                            <td>&nbsp;</td>
HTML;
                                }
                            }
                            echo <<<HTML
                        </tr>
                    </tfoot>
HTML;
        }
    }

    /**
     * Define as ações que estarão disponíveis no relatório. As ações são exibidas nas
     * primeiras colunas da listagem. As ações podem ser de dois tipos, simples e avançadas.
     *
     * Ações simples são definidas com o nome da ação (veja lista disponível de ações)
     * como chave do array e o nome da callback js que deverá ser invocada. O valor
     * passado para todas ações simples é o da primeira coluna da listagem e esta coluna
     * deixa de ser exibida na listagem.
     * Ex:
     * $listagem = new Simec_Listagem();
     * ...
     * $listagem->setAcoes(
     *      array('plus' => 'detalharItem')
     * );
     * ...
     * $listagem->render();
     *
     * Ações avançadas são definidas com o nome da ação (veja lista disponível de ações)
     * como chave do array e um array de configuração que inclui o nome da callback js e
     * os parâmetros extras que a ação pode receber. A ação PLUS, é uma ação especial e
     * adiciona um identificador para o ícone e também para a sua linha da listagem;
     * Ex:
     * $listagem = new Simec_Listagem();
     * ...
     * $listagem->setAcoes(
     *     array('plus' => array(
     *         'func' => 'detalharItem',
     *         'extra-params' => array('idLinha', 'exercicio')
     *     )
     * );
     * ...
     * $listagem->render();
     *
     * @param array $acoes Definições das ações que deverão ser encorporadas na listagem.
     * @see Simec_Listagem::acoesDisponiveis
     */
    public function addAcao($acao, $config)
    {
        $this->acoes[$acao] = $config;
    }

    /**
     * Define condições para que uma ação seja exibida em uma listagem. A ação em questão só será exibida se atender a<br />
     * todas as condições forem atendidas. A condição é criada verificando valores do conjunto de dados da listagem.<br />
     * Se mais de uma condição for definida para a ação, esta só será exibida se todas as condições forem atendidas.<br />
     * Exemplo de utilização:<pre>
     * $dados = array(array('valor' => 3.00), array('valor' => 0.00));
     *
     * $listagem = new Simec_Listagem();
     * $listagem->setDados($dados);
     * $listagem->setCabecalho(array('Valor'));
     * $listagem->addAcao('edit', 'editarValor');
     * $listagem->setAcaoComoCondicional('edit', array(array('campo' => 'valor', 'valor' => 0.00, 'op' => 'diferente')));
     * $listagem->render();</pre>
     * Desta forma, a ação de edição só será exibida se o valor do campo 'valor' for igual a 0.00.
     *
     * @param string|array $acao Nome da ação, ou ações, que serão exibidas de acordo com a condição definida.
     * @param array $condicoes Array de configuração da(s) condição(ões) de exibição da ação.
     */
    public function setAcaoComoCondicional($acao, array $condicoes)
    {
        if (is_array($acao)) {
            foreach ($acao as $acao_) {
                $this->acoesCondicionais[$acao_] = $condicoes;
            }
        } else {
            $this->acoesCondicionais[$acao] = $condicoes;
        }
    }
}
